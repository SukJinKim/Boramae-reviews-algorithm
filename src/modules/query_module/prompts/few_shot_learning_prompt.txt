### 결과 예시 1###
1. 문제 분석
이 문제는 두 플레이어가 번갈아가며 카드를 선택하거나 버리는 게임에서 최적의 전략을 찾는 문제입니다.

핵심 요구사항:

각 플레이어는 자신의 턴에 다음 네 가지 행동 중 하나를 선택할 수 있습니다:
왼쪽 끝 카드 선택
오른쪽 끝 카드 선택
왼쪽 끝 두 장 버리기
오른쪽 끝 두 장 버리기
게임이 끝났을 때 두 플레이어의 점수 차이를 구해야 합니다.
선택한 알고리즘: 재귀적 접근을 사용한 동적계획법 알고리즘
선택한 데이터 구조: 벡터 (카드 정보 저장)

2. 최적화된 코드
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int C, N;
vector<int> p;
vector<vector<int>> dp;

int play(int left, int right)
{
    if (left > right) return 0;
    
    int& ret = dp[left][right];
    if (ret != -1e9) return ret;
    
    // 왼쪽 카드 선택
    ret = max(ret, p[left] - play(left + 1, right));
    // 오른쪽 카드 선택
    ret = max(ret, p[right] - play(left, right - 1));
    // 왼쪽 두 장 버리기
    if (right - left + 1 >= 2)
        ret = max(ret, -play(left + 2, right));
    // 오른쪽 두 장 버리기
    if (right - left + 1 >= 2)
        ret = max(ret, -play(left, right - 2));
    
    return ret;
}

int main()
{
    cin >> C;
    while (C--)
    {
        cin >> N;
        p.resize(N);
        dp.assign(N, vector<int>(N, -1e9));
        for (int i = 0; i < N; i++)
            cin >> p[i];
        cout << play(0, N - 1) << endl;
    }
    return 0;
}
3. 변경 사항 설명
동적 프로그래밍 도입:

dp 배열을 추가하여 중복 계산을 피합니다.
시간 복잡도를 O(2^N)에서 O(N^2)로 개선합니다.
재귀 함수 간소화:

isFirstPlayer 매개변수를 제거하고, 점수 차이를 직접 계산합니다.
코드의 가독성이 향상되고 중복이 줄어듭니다.
최대/최소 계산 통합:

두 플레이어의 행동을 하나의 함수로 통합하여 코드 중복을 제거합니다.
현재 플레이어는 점수 차이를 최대화하고, 상대 플레이어는 최소화하는 방식으로 구현합니다.
초기화 최적화:

dp 배열을 -1e9로 초기화하여 별도의 방문 체크 없이 계산 여부를 확인할 수 있습니다.
4. 성능 분석
시간 복잡도:

원래 코드: O(4^N), 여기서 N은 카드의 수입니다. 각 단계에서 4가지 선택을 하고, 최대 N번 재귀 호출이 발생합니다.
최적화된 코드: O(N^2), 동적 프로그래밍을 통해 각 부분 문제를 한 번만 계산합니다.
공간 복잡도:

원래 코드: O(N), 재귀 호출 스택의 최대 깊이입니다.
최적화된 코드: O(N^2), 동적 프로그래밍 테이블을 저장하기 위해 추가적인 공간이 필요합니다.
최적화된 코드는 시간 복잡도를 크게 개선하여 더 큰 입력에 대해서도 효율적으로 동작할 수 있습니다. 공간 복잡도는 증가했지만, 시간 복잡도의 개선이 더 중요한 이점을 제공합니다.

### 결과 예시 2###
문제 분석 및 최적화
1. 문제 분석
주어진 문제는 친구들이 알레르기 때문에 먹을 수 없는 음식을 고려하여, 최소한의 음식을 준비해야 하는 문제입니다. 
이는 집합 덮개(set cover)라고 부르는 문제로, 계산 이론 쪽에서는 가장 유명한 NP 완비(NP complete) 문제 중 하나입니다. 
이 문제를 해결할 수 있는 가장 직관적인 방법은 음식을 선택하는 모든 경우의 수를 하나하나 만들어 보는 것입니다. 하지만 이는 너무 느리기 때문에
이 문제를푸는 간단한 방법은 탐색의 형태를 바꾸는 것입니다. 이 음식을 만들 것인가 여부를 선택하는 대신에, 매 재귀 호출마다 아직 먹을 음식이 없는 친구를
하나 찾은 뒤 이 친구를 위해 어떤 음식을 만들지를 결정하는 것이지요.

사용하면 좋은 데이터 구조:

비트마스크: 음식의 조합을 표현하기 위해 비트마스크를 사용하여 각 음식의 선택 여부를 나타냅니다..
그래프 이론: 친구와 음식 간의 관계를 그래프로 표현합니다.

사용하면 좋은 알고리즘 기법:

조합 탐색의 최적화 기법을 이용해 빠른 시간안에 최소 음식을 찾습니다.
휴리스틱을 이용한 가지치기, 탐욕적 알고리즘으로 적절한 초기해를 만들어줍니다.


2. 최적화된 코드
#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
#include <algorithm>

using namespace std;

const int INF = 987654321;

int n, m;
// canEat[i] = i번 친구가 먹을 수 있는 음식의 집합
// eaters[i] = i번 음식을 먹을 수 있는 친구들의 집합
vector<int> canEat[50], eaters[50];
unordered_map<string, int> friendIds;

int best;

// edible[i] = 지금까지 고른 음식 중 i번 친구가 먹을 수 있는 음식의 수
// chosen : 지금까지 선택한 음식의 수
void search(vector<int> &edible, int chosen)
{
    //간단한 가지치기
    if (chosen >= best)
        return;

    // 아직 먹을 음식이 없는 친구 찾기
    int first = 0;
    while (first < n && edible[first] > 0)
        ++first;

    // 모든 친구가 먹을 음식이 있으면 종료
    if (first == n)
    {
        best = chosen;
        return;
    }

    // 이 친구가 먹을 수 있는 음식을 하나 만든다.
    for (int i = 0; i < canEat[first].size(); ++i)
    {
        int food = canEat[first][i];
        for (int j = 0; j < eaters[food].size(); ++j)
            edible[eaters[food][j]]++;
        search(edible, chosen + 1);
        for (int j = 0; j < eaters[food].size(); ++j)
            edible[eaters[food][j]]--;
    }
}

int main()
{
    int c;
    cin >> c;

    while (c--)
    {
        cin >> n >> m;

        // 초기화 (이전 데이터 삭제)
        friendIds.clear();
        for (int i = 0; i < 50; ++i)
        {
            canEat[i].clear();
            eaters[i].clear();
        }
        // 초기화 (새로운 데이터 입력)
        for (int i = 0; i < n; ++i)
        {
            string fName;
            cin >> fName;

            friendIds[fName] = i;
        }

        for (int i = 0; i < m; ++i)
        {
            int nEaters;
            cin >> nEaters;

            vector<int> canEaters;
            for (int j = 0; j < nEaters; ++j)
            {
                string fName;
                cin >> fName;

                int id = friendIds[fName];
                eaters[i].push_back(id);
                canEat[id].push_back(i);
            }
        }

        vector<int> edible(n, 0);
        best = INF;
        search(edible, 0);

        cout << best << endl;
    }

    return 0;
}
3. 변경 사항 설명
기존 코드는 m이 최댓값일 경우 대략 백만 개의 상태를 탐색합니다. 그렇게 된다면 코드가 시간 안에 동작하지 않게 됩니다.
기존의 search() 함수는 문제를 m개의 조각으로 쪼갠 뒤 각 조각에서 해당 음식을 만들지 않을지를 결정했습니다.
=>
변경된 search() 함수에서는 매 재귀 호출마다 아직 먹을 음식이 없는 친구를 하나 찾은 뒤 이 친구를 위해 어떤 음식을 만들지를 결정하도록
변경하였습니다.

4. 성능 분석
a) 시간 복잡도
원래 코드: O(2^m * n * m) (모든 음식 조합을 확인하고, 각 조합에 대해 모든 친구를 확인)
최적화된 코드: O(2^m * n) (음식 조합을 비트마스크로 표현하여, 각 조합에 대해 친구를 확인하는 과정에서 불필요한 반복을 줄임)
b) 공간 복잡도
원래 코드: O(n + m) (친구와 음식 정보를 저장하기 위한 공간)
최적화된 코드: O(n) (비트마스크를 사용하여 음식 조합을 표현하므로 추가적인 공간 사용을 줄임)
결론
최적화된 코드는 비트마스크를 활용하여 음식 조합을 효율적으로 탐색하고, 친구가 먹을 수 있는 음식을 확인하는 과정을 간소화했습니다. 이로 인해 시간 복잡도와 공간 복잡도가 모두 개선되어 성능이 향상되었습니다.
c) 추가 설명
 - 아직 먹을 것이 없는 첫 번째 친구를 찾는 것이 아니라, 먹을 수 있는 음식의 종료가 적은 친구를 찾도록 합니다.
 - 음식을 선택할 때, 가장 많은 사람이 먹을 수 있는 음식부터 시도합니다.
